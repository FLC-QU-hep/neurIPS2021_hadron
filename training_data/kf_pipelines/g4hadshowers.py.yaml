apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ildeventgen-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.9, pipelines.kubeflow.org/pipeline_compilation_time: '2022-01-13T13:18:25.997122',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Event Simulation and Reconstruction",
      "name": "ILDEventGen"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.9}
spec:
  entrypoint: ildeventgen
  templates:
  - name: hdf5-conversion
    container:
      args: ['git clone --branch postpaper https://github.com/FLC-QU-hep/neurIPS2021_hadron.git
          &&                                 cd $PWD/neurIPS2021_hadron/training_data/kf_pipelines/
          && cp ../create_hdf5.py . &&                                 python create_hdf5.py
          --rootfile "$0" --branch pionSIM --batchsize 1 --output pion-shower-"$1"
          --hcal True &&                                 RUN=$(echo "$0" | cut -d"/"
          -f3) &&                                 cp pion-shower-"$1".hdf5 /mnt/$RUN
          && cp pion-shower-"$1".hdf5 /tmp', '{{inputs.parameters.simulation-root}}',
        p1]
      command: [/bin/bash, -c]
      image: engineren/pytorch:latest
      volumeMounts:
      - {mountPath: /mnt, name: persistent-volume}
    inputs:
      parameters:
      - {name: persistent-volume-name}
      - {name: simulation-root}
    outputs:
      artifacts:
      - {name: hdf5-conversion-data, path: /tmp/pion-shower-p1.hdf5}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.9
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: persistent-volume
      persistentVolumeClaim: {claimName: '{{inputs.parameters.persistent-volume-name}}'}
  - name: ildeventgen
    dag:
      tasks:
      - name: hdf5-conversion
        template: hdf5-conversion
        dependencies: [persistent-volume, simulation]
        arguments:
          parameters:
          - {name: persistent-volume-name, value: '{{tasks.persistent-volume.outputs.parameters.persistent-volume-name}}'}
          - {name: simulation-root, value: '{{tasks.simulation.outputs.parameters.simulation-root}}'}
      - {name: persistent-volume, template: persistent-volume}
      - name: reconstruction
        template: reconstruction
        dependencies: [persistent-volume, simulation]
        arguments:
          parameters:
          - {name: persistent-volume-name, value: '{{tasks.persistent-volume.outputs.parameters.persistent-volume-name}}'}
          - {name: simulation-lcio, value: '{{tasks.simulation.outputs.parameters.simulation-lcio}}'}
      - name: simulation
        template: simulation
        dependencies: [persistent-volume]
        arguments:
          parameters:
          - {name: persistent-volume-name, value: '{{tasks.persistent-volume.outputs.parameters.persistent-volume-name}}'}
      - name: train
        template: train
        dependencies: [hdf5-conversion, persistent-volume]
        arguments:
          parameters:
          - {name: persistent-volume-name, value: '{{tasks.persistent-volume.outputs.parameters.persistent-volume-name}}'}
          artifacts:
          - {name: hdf5-conversion-data, from: '{{tasks.hdf5-conversion.outputs.artifacts.hdf5-conversion-data}}'}
  - name: persistent-volume
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '{{workflow.name}}-my-pvc'
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 15Gi
    outputs:
      parameters:
      - name: persistent-volume-manifest
        valueFrom: {jsonPath: '{}'}
      - name: persistent-volume-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: persistent-volume-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.9
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
  - name: reconstruction
    container:
      args: ['git clone --branch postpaper https://github.com/FLC-QU-hep/neurIPS2021_hadron.git
          &&                                 cd $PWD/neurIPS2021_hadron/training_data/kf_pipelines/
          &&                                 chmod +x ./runRec.sh && ./runRec.sh "$0"',
        '{{inputs.parameters.simulation-lcio}}']
      command: [/bin/bash, -c]
      image: ilcsoft/ilcsoft-centos7-gcc8.2:v02-01-pre
      volumeMounts:
      - {mountPath: /mnt, name: persistent-volume}
    inputs:
      parameters:
      - {name: persistent-volume-name}
      - {name: simulation-lcio}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.9
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: persistent-volume
      persistentVolumeClaim: {claimName: '{{inputs.parameters.persistent-volume-name}}'}
  - name: simulation
    container:
      args: ['git clone --branch postpaper https://github.com/FLC-QU-hep/neurIPS2021_hadron.git  &&                                 cd
          $PWD/neurIPS2021_hadron/training_data/kf_pipelines/ && chmod +x ./runSim.sh
          && ./runSim.sh &&                                 ls -ltrh /mnt']
      command: [/bin/bash, -c]
      image: ilcsoft/ilcsoft-centos7-gcc8.2:v02-01-pre
      volumeMounts:
      - {mountPath: /mnt, name: persistent-volume}
    inputs:
      parameters:
      - {name: persistent-volume-name}
    outputs:
      parameters:
      - name: simulation-lcio
        valueFrom: {path: /mnt/lcio_path}
      - name: simulation-root
        valueFrom: {path: /mnt/root_path}
      artifacts:
      - {name: simulation-lcio, path: /mnt/lcio_path}
      - {name: simulation-root, path: /mnt/root_path}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.9
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: persistent-volume
      persistentVolumeClaim: {claimName: '{{inputs.parameters.persistent-volume-name}}'}
  - name: train
    container:
      args: ['echo "$0" && python -c "import torch; print(torch.__version__)" ', /tmp/inputs/input-0/data]
      command: [/bin/bash, -c]
      image: engineren/pytorch:latest
      volumeMounts:
      - {mountPath: /mnt, name: persistent-volume}
    inputs:
      parameters:
      - {name: persistent-volume-name}
      artifacts:
      - {name: hdf5-conversion-data, path: /tmp/inputs/input-0/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.9
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
    volumes:
    - name: persistent-volume
      persistentVolumeClaim: {claimName: '{{inputs.parameters.persistent-volume-name}}'}
  arguments:
    parameters: []
  serviceAccountName: pipeline-runner
